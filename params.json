{"name":"Gitim","tagline":"Generalized Identification of Truly Interfacial Molecules","body":"## Status [![Build Status](https://travis-ci.org/Marcello-Sega/gitim.svg?branch=ITIM)](https://travis-ci.org/Marcello-Sega/gitim) \r\n\r\n## Quick links\r\n*  [References](#references)\r\n*  [How to compile](#how-to-compile)\r\n*  [Tutorial](TUTORIAL.md)\r\n\r\n# What is ITIM/GITIM?  \r\n<img src=\"media/soot1small.png\" width=\"180\" align=\"right\" style=\"z-index:999;\">\r\n**ITIM** and **GITIM** are two algorithms for the identification\r\nof interfacial molecules or atoms. GITIM is a generalization of the\r\nITIM algorithm, which has been designed for planar interfaces. GITIM,\r\non the contrary, is free from any geometrical constraints and can\r\nbe used to analyze intrinsic properties of surfaces with arbitrary\r\nshape. \r\n\r\n### What can I find here ? \r\n\r\n* Two code branches,\r\n[ITIM](https://github.com/Marcello-Sega/gitim/tree/ITIM) and\r\n[GITIM](https://github.com/Marcello-Sega/gitim/tree/GITIM), which\r\nimplement the respective algorithms in the form of a program that\r\ncan read [GROMACS](http://www.gromacs.org) trajectories.\r\n\r\n* Instructions on [how to compile](#how-to-compile) the software\r\n \r\n* A tutorial on how to compute intrinsic profiles\r\n\r\n* References\r\n\r\n### Which branch should I use, ITIM or GITIM? \r\n\r\nIf you are interested in planar interfaces only, use the ITIM branch.\r\n\r\nCurrently the code is undergoing a major restructuring, with new\r\nfeatures added and bugs fixed. The ITIM branch is so far the most\r\nup-to-date, with a new build system that ensures compatibility with\r\na broader range of GROMACS versions. New features/bugfix are being\r\nbackported to the GITIM branch.\r\n\r\n### Which features are included? \r\n* Identification of interfacial atoms\r\n* Identification of interfacial molecules\r\n* Identification of further atomic/molecular layers\r\n* Cluster search to deal with partially miscible systems\r\n* Calculation of intrinsic and non-intrinsic density and mass profiles\r\n* Use of enhanced Monte Carlo sampling to take into account the fluctuations of the opposite interface on the density profiles\r\n* Exporting PDB files containing also the information on the layer to which atoms belong to, as well as the intrinsic distance from the surface.\r\n\r\n_Note: Some of the features are so far present only in the ITIM branch and are currently being ported to the GITIM branch._\r\n\r\n\r\n### Which code is faster, ITIM or GITIM\r\n\r\nITIM, by far. This is because GITIM needs to compute the alpha-shape\r\nof the phase, which in turn relies on the Delauney triangulation.\r\nThis is done through QHull, but it is still much slower than the\r\nITIM algorithm.  So, if you only have to deal with planar interfaces,\r\ngo for the ITIM branch.\r\n\r\n### What do I need to build the code ? \r\n\r\n* A gromacs build + sources (compatibility starting from GROMACS 4.6.7 up to 5.1) \r\n* Cmake >= 2.8.11\r\n\r\n### What can you do with GITIM?\r\n\r\nCheck out the [usage example page](http://www.gitim.eu/usage-examples) of the gitim web site http://www.gitim.eu\r\n\r\n---------------------------\r\n\r\n# References\r\n\r\nIf you use this code to publish some research results, please read and cite both of the two following papers.\r\n\r\n[M. Sega, S. S. Kantorovich P. Jedlovszky and M. Jorge, _J. Chem. Phys._ **138**, 044110 (2013)](http://dx.doi.org/10.1063/1.4776196) The generalized identification of truly interfacial molecules (ITIM) algorithm for nonplanar interfaces.\r\n\r\n[L. B. Pártay, G. Hantal, P. Jedlovszky, Á. Vincze and G. Horvai, _J. Comp. Chem._ **29**, 945 (2008)] (http://dx.doi.org/10.1002/jcc.20852)\r\nA new method for determining the interfacial molecules and characterizing the surface roughness in computer simulations. Application to the liquid–vapor interface of water\r\n\r\n-----------------\r\n\r\n#How to compile\r\n\r\n###Requirements\r\n* A working version of GROMACS (source code _and_ build tree)\r\n* Cmake (>= 2.8.11)\r\n* For GITIM only, the [Gnu Scientific Library](http://www.gnu.org/software/gsl/) (GSL)\r\n\r\nSupport of GROMACS versions from 4.6 up to 5.1 (included) is guaranteed for the [ITIM](https://github.com/Marcello-Sega/gitim/tree/ITIM) branch.\r\nFor the [GITIM](https://github.com/Marcello-Sega/gitim/tree/GITIM)\r\nbranch, the build system is currently being updated, and out-of-the-box\r\ncompatibility with all GROMACS version is not guaranteed.\r\n\r\n###Obtaining the software\r\nIf you have `git` installed on your system, simply use the command\r\n\r\n    git clone https://github.com/Marcello-Sega/gitim.git\r\n\r\nOtherwise, download the latest commit from the web interface:\r\n\r\n![snapshot](media/git-clone.png)\r\n\r\n###Configuring and building\r\n\r\nenter the repository and create a build directory\r\n  \r\n    cd gitim  \r\n    mkdir build\r\n    cd build\r\n\r\nThere, launch cmake providing the location of your gromacs tree\r\nand your gromacs build (these two could coincide), for example:\r\n\r\n    cmake .. -DMYGMX_SRC=~/gromacs-5.0.6/ -DMYGMX_BUILD=~/gromacs-5.0.6/build/\r\n\r\ncompile with \r\n   \r\n    make\r\n\r\nDone!\r\n\r\nHere is what I see on my terminal when I do a fresh install:\r\n\r\n     > clear\r\n\r\n     > git clone https://github.com/Marcello-Sega/gitim.git\r\n\r\n     Cloning into 'gitim'...\r\n     remote: Counting objects: 590, done.\r\n     remote: Compressing objects: 100% (43/43), done.\r\n     remote: Total 590 (delta 91), reused 69 (delta 69), pack-reused 478\r\n     Receiving objects: 100% (590/590), 2.61 MiB | 1.55 MiB/s, done.\r\n     Resolving deltas: 100% (322/322), done.\r\n     Checking connectivity... done.\r\n\r\n     > cd gitim\r\n\r\n     > ls\r\n\r\n     CMakeLists.txt COPYING        DISCLAIMER     HOWTO          README.md      examples       gmx_itim.cpp   maintainer     media\r\n\r\n     > mkdir build\r\n     > cd build/\r\n\r\n     > cmake .. -DMYGMX_TREE=~/gromacs-5.0.6/ -DMYGMX_BUILD=~/gromacs-5.0.6/build/\r\n\r\n\r\n     -- The CXX compiler identification is AppleClang 6.0.0.6000056\r\n     -- Check for working CXX compiler: /usr/bin/c++\r\n     -- Check for working CXX compiler: /usr/bin/c++ -- works\r\n     -- Detecting CXX compiler ABI info\r\n     -- Detecting CXX compiler ABI info - done\r\n     -- checking version file ~/gromacs-5.0.6/build/src/external/tng_io/include/tng/version.h\r\n     -- checking version file ~/gromacs-5.0.6/build/src/gromacs/version.h\r\n     -- ============================================================\r\n     -- GMX version: 50000    on    Darwin-14.5.0   \r\n     -- ============================================================\r\n     -- \r\n     -- ==================================================\r\n     -- Using libraries: ~/gromacs-5.0.6/build/lib/libgromacs.dylib \r\n     -- ==================================================\r\n     -- \r\n     -- GMX LIB:  ~/gromacs-5.0.6/build/lib/libgromacs.dylib\r\n     -- Configuring done\r\n     -- Generating done\r\n     -- Build files have been written to: /tmp/gitim/build\r\n\r\n     > make\r\n\r\n     Scanning dependencies of target g_itim\r\n     [100%] Building CXX object CMakeFiles/g_itim.dir/gmx_itim.cpp.o\r\n     Linking CXX executable g_itim\r\n     [100%] Built target g_itim\r\n\r\n     > ls\r\n\r\n     CMakeCache.txt      CMakeFiles          Makefile            cmake_install.cmake examples            g_itim\r\n\r\n---------------------------\r\n\r\n\r\n","google":"UA-52066388-1","note":"Don't delete this file! It's used internally to help with page regeneration."}